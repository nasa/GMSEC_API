# Copyright 2007-2024 United States Government as represented by the
# Administrator of The National Aeronautics and Space Administration.
# No copyright is claimed in the United States under Title 17, U.S. Code.
# All Rights Reserved.
 
 
=========================================================================
                GMSEC API Open Source Build Instructions
=========================================================================

This file describes how to build the GMSEC API from the open source
distribution. This process requires a myriad of dependencies that include,
depending on the platform and the desired API bindings, the following:

* Compiler (e.g. GCC or Visual Studio)
* OpenJDK
* Simplified Wrapper Interface Generator (SWIG)
* Mono (for Linux)
* Node
* Strawberry Perl (for Windows)
* Python 3
* Ruby
* Middleware client libraries and header files

If the user does not want to build the API themselves, prebuilt binary
distributions can be found on NASA GitHub under tagged releases. For
example: https://github.com/nasa/GMSEC_API/releases/tag/API-5.1-release


Otherwise, the steps in this guide assume the user has the following:

* The source code for the API, located in a directory named GMSEC_API or
  GMSEC_API-x.y, where x.y is the version number.


Below is a detailed list of additional tools/packages for particular
systems:

* For Windows systems:
    - Visual Studio 2017 or 2019
    - The manifest tool (mt.exe) from the Windows SDK
    - OpenJDK version 1.8 or higher (OpenJDK 17 is preferred)
    - SWIG 4.1.0 or later
    - Node 18.15.0 (from https://nodejs.org/en/download)
    - Strawberry Perl 5.32.1.1 or later
    - Python 3.10.7 or later (from https://www.python.org/downloads)
    - Ruby 3.2.2


* For RHEL 8:
    - GCC 8.5.0
    - GNU make 4.2.1
    - OpenJDK version 1.8 or higher (OpenJDK 17 is preferred)
    - SWIG 4.1.0 or later
    - Mono JIT Compiler 6.12.0.107 or later
    - Node 18.15.0 (from https://nodejs.org/en/download)
    - Perl 5.26.3 or later
    - Python 3.10.7 or later (from https://www.python.org/downloads)
    - Ruby 2.5.9p229


For Ubuntu 20.04 (x86-64 or ARM64):
    - GCC 9.4.0
    - GNU make 4.2.1
    - OpenJDK version 1.8 or higher (OpenJDK 17 is preferred)
    - Mono JIT Compiler 6.16.0.182 or later
    - Node 18.15.0 (from https://nodejs.org/en/download)
    - Perl 5.30.0 or later
    - Python 3.10.7 or later (from https://www.python.org/downloads)
    - Ruby 2.7.0p0


For MacOS (x86-64):
    - GCC Apple clang version 14.0.0 (clang-1400.0.29.202)
    - GNU make 3.81
    - OpenJDK version 1.8 or higher (OpenJDK 17 is preferred)
    - Mono JIT Compiler 6.12.0.108 or later (install using Homebrew)
    - Node 18.15.0 (from https://nodejs.org/en/download)
    - Perl 5.36.0 or later (install using Homebrew)
    - Python 3.10.5 or later (install using Homebrew)
    - Ruby 3.2.2 (install using Homebrew)


Please note that this document is intended as a "getting started" document.
After a user becomes familiar with the build process, a more tailored process
can be implemented to fit one's needs when building the GMSEC API.


Comments on dependencies
-----------------------------------------
The tools and versions identified are those used by the GMSEC team to build
binaries for distribution. Many alternative tools and versions will work.

Simplified Wrapper and Interface Generator (SWIG) is a third party and open-
source tool used to build the C#, NodeJS, Perl, Python3, and Ruby language
bindings of the GMSEC API. For users wishing to pursue an open source build
of the API, SWIG will need to be installed in order to build these additional
language bindings of the API.


Building GMSEC API extensions
-----------------------------------------
In order to build GMSEC API extensions, for example middleware adapters,
the directory layout assumed by the build files is:

    + GMSEC/
        + GMSEC_API/
            + ...
        + GMSEC_SUPPORT/
            + ...

For example, if building the middleware adapter for the (fictional) mwx
middleware, the GMSEC_SUPPORT directory would appear as:

        + GMSEC_SUPPORT/
            + mwx/
                + include/
                + lib/
                + ...

In the example above, the mwx/include/ and mwx/lib/ directories contain the
middleware client interface and libraries for mwx. Soft-links (or junctions)
are useful when populating the GMSEC_SUPPORT directory since those links can
refer to standard installation locations on the system.




==========================================================================
                           Windows systems
==========================================================================

Configuring Strawberry Perl:
-----------------------------------------
1.  Download the 64-bit ZIP file from here:
    https://strawberryperl.com/releases.html


2. Locate downloaded file and using 7-zip, run 'Extract here...'


3. Enter C:\Strawberry as the install path; be sure to deselect the box below


4. Using a command prompt, navigate to C:\Strawberry


5. Run the script relocation.pl.bat (and the close the command prompt)
    Note: Not all versions and distributions have this file. If yours doesn't, skip this step.


6. Using File Explorer, navigate to C:\Strawberry\perl\lib\CORE


7. Using Notepad++ or other editor, open config.h

        a. Comment out line 1038 (HAS_STATIC_INLINE)

        b. Comment out line 1039 (PERL_STATIC_INLINE)

        c. Comment out line 2312 (HAS_BUILTIN_EXPECT)


8. Using File Explorer, navigate to C:\Strawberry\perl\lib\CORE\sys


9. Using Notepad++ or other editor, open socket.h

        a. Between lines 17 and 18, insert the following statement:

        #  define _WSPIAPI_COUNTOF(_Array) (sizeof(_Array) / sizeof(_Array[0]))


Environment Variable Settings:
-----------------------------------------

Define environment variables to reference tools and then augment PATH to reference
these.

It is recommended to set environment variables so that they affect all processes.
To do this, open up the Environment Variables settings in Windows (search for
"Edit environment for your account") to add/modify variables as needed.

Note:
Any open process (e.g. command prompt, cygwin, or Visual Studio) will need to
be restarted if environment variables have been added or modified.

For example:
    set JDK_HOME="C:\Program Files\AdoptOpenJDK"
    set JAVA_HOME=%JDK_HOME%
    set NODE_HOME=C:\node-18.15.0
    set PERL5_HOME=C:\Strawberry
    set PYTHON3_HOME=C:\Python310
    set RUBY_HOME=C:\Ruby-3.2.2
    set SWIG_HOME=C:\swig-4.1.0

    set PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64
    set PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\MSBuild\Current\Bin\amd64
    set PATH=%PATH%;%WIN_SDK%
    set PATH=%PATH%;%JDK_HOME%\bin
    set PATH=%PATH%;%NODE_HOME%
    set PATH=%PATH%;%PYTHON3_HOME%
    set PATH=%PATH%;%PERL5_HOME%\c\bin;%PERL5_HOME%\perl\site\bin;%PERL5_HOME%\perl\bin
    set PATH=%PATH%;%RUBY_HOME%\bin


Building the C, C++, C#, Java, NodeJS, Perl, Python3, and Ruby bindings:
------------------------------------------------------------------------
Open GMSEC_API\gmsec_api_opensource.sln in Visual Studio.

Choose the "Release" Solution Configuration (located in the toolbar) and select
the "x64" architecture. Note, the GMSEC API no longer supports "Win32" builds.

Start by building the 'gmsec_api' project. This will build the C and C++
bindings of the GMSEC API.

Once completed, then build other projects as needed (i.e., C#, NodeJS, etc.)


Utilities (e.g. gmpub, gmsub, etc.):
---------------------
Open GMSEC_API\tools\utilities\utilities.sln in Visual Studio.

Choose the Release/x64 configuration.

In the Solution Explorer, right-click the solution and select "Rebuild Solution".
The executables will be placed in the GMSEC_API\bin directory.


C++ Examples:
---------------------
Open GMSEC_API\examples\cpp\cpp.sln in Visual Studio.

Choose the Release/x64 configuration.

In the Solution Explorer, right-click the solution and select "Rebuild Solution".
The executables will be placed within the respective folder for each project.


C Examples:
---------------------
Open GMSEC_API\examples\cpp\c.sln in Visual Studio.

Choose the Release/x64 configuration.

In the Solution Explorer, right-click the solution and select "Rebuild Solution".
The executables will be placed within the respective folder for each project.


C# Examples:
---------------------
Open GMSEC_API\examples\cpp\csharp.sln in Visual Studio.

Choose the Release/x64 configuration.

In the Solution Explorer, right-click the solution and select "Rebuild Solution".
The executables will be placed within the respective folder for each project.


Java Examples:
---------------------
From a command prompt or Powershell terminal, run GMSEC_API\examples\java\compileAll.cmd


All done! Proceed to the section "Testing the Build" below.



=========================================================================
                        Linux/MacOS systems
=========================================================================
Define environment variables to reference tools and then augment PATH and
LD_LIBRARY_PATH to reference these.

It is recommended to set environment variables so that they affect all processes.
Assuming a Bash-shell environment is used, add variable definitions to one of
the following files:

    Platform     File
    ---------    -------
    Linux        ~/.bashrc
    MacOS        ~/.bash_profile


For example:
    export JDK_HOME=~/tools/jdk-11.0.17+8
    export JAVA_HOME=%JDK_HOME%
    export NODE_HOME=~/tools/node-18.15.0
    export SWIG_HOME=~/tools/swig-4.1.0

    export PATH=$JDK_HOME/bin:$PATH       # we prefer our install of OpenJDK vs. the system's
    export PATH=$NODE_HOME:$PATH          # we prefer our install of NodeJS vs. the system's
    export PATH=$SWIG_HOME/bin:$PATH      # we prefer our install of SWIG vs. the system's


Additional environment variable(s):

Depending on the OS, export GMSEC_PLATFORM according to the choices below:

    Platform         Setting
    ---------        -------
    Linux x86-64     linux.x86_64
    Linux ARM64      aarch64
    MacOS x86-64     macosx.x86_64

For example:

    export GMSEC_PLATFORM=linux.x86_64


PERL5 DEVELOPMENT HEADERS and LIBRARIES:
----------------------------------------
Set the PERL5_INC environment variable to the directory containing
the CORE sub-directory (the latter contains EXTERN.h).

Set the PERL5_LIB environment variable to the directory containing
the Perl shared-object library.

For example:

RHEL8:
    export PERL5_INC=/usr/lib64/perl5
    export PERL5_LIB=/usr/lib64/perl5

Ubuntu 20.04:
    export PERL5_INC=/usr/lib/x86_64-linux-gnu/perl/5.30.0
    export PERL5_LIB=/usr/lib/x86_64-linux-gnu

MacOS:
    export PERL5_INC=/usr/local/lib/perl5/5.36/darwin-thread-multi-2level
    export PERL5_LIB=/usr/local/lib/perl5/5.36/darwin-thread-multi-2level


PYTHON3 DEVELOPMENT HEADERS and LIBRARIES:
------------------------------------------
For Python3 support, set PYTHON3_HOME to the location where the Python3
development folder is located. In addition, set PYTHONPATH to reference the
appropriate GMSEC API libraries.

For example:

RHEL8 and Ubuntu 20.04:
    export PYTHON3_HOME=/usr/local/python3
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PYTHON3_HOME/lib
    export PYTHONPATH=/home/user/GMSEC_API/bin:/home/user/GMSEC_API/bin/lib/GMSECAPI5:.

MacOS:
    Rely on python3 from Homebrew


RUBY DEVELOPMENT:
----------------------------
For Ruby support, set RUBYLIB to reference the appropriate GMSEC API libraries.

For example:

    export RUBYLIB=/home/user/GMSEC_API/bin:.


MW_WRAPPERS :
-----------
This optional environment variable can be used to specify which middleware wrappers,
in addition to Message Bus and Bolt wrappers, that should be created. A listing
of the various middleware wrappers that can be built are listed in the
GMSEC_API/wrapper directory.

NOTE: To build middleware wrappers (other than Bolt and Message Bus), third-
party libraries and header files are needed. It is assumed the user will have
these available.

For example, in Bash, the following statement would indicate that the ActiveMQ
C++ 3.9.5 and the Artemis wrappers should be built:

    export MW_WRAPPERS="activemq395 artemis"



Building the API :
-----------------------

To begin building the GMSEC API, execute the following commands:

    $ cd GMSEC_API
    $ make clean && make

If the make-process is successful, the GMSEC API will have been built, along
with a handful of utility executable programs that can be used to test the API.
These software libraries and utilities will reside in the GMSEC_API/bin
directory.

To copy the GMSEC_API/bin to a 'release' folder, execute this command:

    $ make install

This will create ../release/GMSEC_API which can be used for developing
custom applications.


All done! Proceed to the next section below for "Testing the Build".


=========================================================================
                            Testing the Build
=========================================================================

Referencing the GMSEC API libraries:
------------------------------------
The GMSEC_API/bin directory holds shared libraries needed by GMSEC.
The environment variable that specifies the directories to search for
shared libraries depends on the operating system:

    Platform              Environment Variable
    -------------         ----------------------
    Windows               PATH
    Linux                 LD_LIBRARY_PATH
    MacOS                 DYLD_LIBRARY_PATH

Update the environment variable corresponding to the platform to include
the fully qualified GMSEC_API/bin directory.

For example:

    Windows   set PATH=C:\GMSEC\release\GMSEC_API\bin;%PATH%
    Linux     export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/home/me/GMSEC/release/GMSEC_API/bin
    MacOS     export DYLD_LIBRARY_PATH=$DYLD_LIBRARY_PATH:/Users/me/GMSEC/release/GMSEC_API/bin


Linux and MacOS users may also wish to include GMSEC_API/bin in their PATH
environment variable; although this is optional, it is highly recommended.
For example:

    Linux     export PATH=/home/me/GMSEC/release/GMSEC_API/bin:$PATH

    MacOS     export PATH=/Users/me/GMSEC/release/GMSEC_API/bin:$PATH


NOTE:
-----
For MacOS users whose system has System Integrity Protection (SIP) enabled (most
systems do!), setting DYLD_LIBRARY_PATH may prove to be moot if using system-
provided utilities such as java, ruby, etc.

To workaround these issues, it is recommend to rely on utilities afforded by
Homebrew.

Alternatively, with elevated privilegeso, one can create soft-links of the GMSEC
API libraries in /usr/local/lib and the GMSEC API message templates one level above.

For example:
    $ cd /usr/local/lib
    $ sudo ln -s /Users/myname/GMSEC_API/bin/*.dylib .
    $ sudo ln -s /Users/myname/GMSEC_API/bin/*.jnilib .

    $ cd /usr/local
    $ sudo ln -s /Users/myname/GMSEC_API/templates .



Start the Bolt server:
----------------------

    Windows   java -jar C:\GMSEC\release\GMSEC_API\bin\bolt.jar

    Linux     java -jar /home/me/GMSEC/release/GMSEC_API/bin/bolt.jar

    MacOS     java -jar /Users/me/GMSEC/release/GMSEC_API/bin/bolt.jar

The Bolt server should indicate that it is listening for a connection, with a
an output message similar to:

2021/347/06:01:10.351 INFO bolt.Server
	waiting for connections on /0.0.0.0:9100



Start the GMSEC message subscriber:
-----------------------------------
For all systems:

    gmsub mw-id=bolt


The subscriber should estabish a connection and listen for a message for which
it has subscribed. For example:

2021/347/06:02:07.282 INFO bolt.Server
	creating IOManager

2021/347/06:02:07.323 MONITOR bolt.Client[id=1]
	created

2021/347/06:02:07.342 INFO bolt.IOManager
	welcome: added WELCOME to Client[id=1]



Start the GMSEC message publisher:
----------------------------------
For all systems:

    gmpub mw-id=bolt


The publisher should connect to Bolt and publish a single message, similar to:

2022-042-11:20:01.367 [INFO] [gmpub.cpp:90] GMSEC API v5.0 [02/10/2022]

2022-042-11:20:01.598 [INFO] [BoltConnection.cpp:241] [0,40,0] : Connection established

2022-042-11:20:01.598 [INFO] [gmpub.cpp:101] Middleware version = Bolt 5.0

2022-042-11:20:01.598 [INFO] [gmpub.cpp:148] Publishing 1 message(s)

2022-042-11:20:01.598 [INFO] [gmpub.cpp:153] Publish interval 1000 [ms]

2022-042-11:20:01.599 [INFO] [gmpub.cpp:254] Published:
        <MESSAGE SUBJECT="C2MS.DOM1.DOM2.MSSN.CNS1.SAT1.MSG.HB.GMPUB" KIND="PUBLISH">
                <FIELD NAME="COMPONENT" TYPE="STRING">GMPUB</FIELD>
                <FIELD NAME="CONSTELLATION-ID" TYPE="STRING">CNS1</FIELD>
                <FIELD NAME="CONTENT-VERSION" TYPE="F32" BITS="44FC6000">2019</FIELD>
                <FIELD NAME="COUNTER" TYPE="U16">1</FIELD>
                <FIELD NAME="DOMAIN1" TYPE="STRING">DOM1</FIELD>
                <FIELD NAME="DOMAIN2" TYPE="STRING">DOM2</FIELD>
                <FIELD NAME="FACILITY" TYPE="STRING">MY-FACILITY</FIELD>
                <FIELD NAME="HEADER-VERSION" TYPE="F32" BITS="44FC6000">2019</FIELD>
                <FIELD NAME="MESSAGE-SUBTYPE" TYPE="STRING">HB</FIELD>
                <FIELD NAME="MESSAGE-TYPE" TYPE="STRING">MSG</FIELD>
                <FIELD NAME="MISSION-ID" TYPE="STRING">MSSN</FIELD>
                <FIELD NAME="PUB-RATE" TYPE="U16">1</FIELD>
                <FIELD NAME="SAT-ID-LOGICAL" TYPE="STRING">SAT1</FIELD>
                <FIELD NAME="SAT-ID-PHYSICAL" TYPE="STRING">SAT1</FIELD>
                <FIELD NAME="SPECIFICATION" TYPE="STRING">C2MS</FIELD>
                <FIELD NAME="SW-VERSION" TYPE="STRING">5.0</FIELD>
        </MESSAGE>

2022-042-11:20:01.695 [INFO] [BoltConnection.cpp:233] [0,39,0] : Connection disconnected



=========================================================================
                      GMSEC API Example Programs
=========================================================================

Example programs are provided for ach language binding supported by the GMSEC API.
These example programs reside within a corresponding folder with GMSEC_API/examples.
Refer to the README.txt file included in the sub-directories for information on
how to configure a system's environment for running the examples.


C Examples:
-----------
C example programs reside in GMSEC_API/examples/c. These are not compiled
as part of the top level API build process, therefore each example program will
need to be compiled by the user using Visual Studio (Windows) or using 'make'
(Linux and MacOS).


C++ Examples:
-------------
C++ example programs reside in GMSEC_API/examples/cpp. These are not compiled
as part of the top level API build process, therefore each example program will
need to be compiled by the user using Visual Studio (Windows) or using 'make'
(Linux and MacOS).


C# Examples:
------------
C# example programs reside in GMSEC_API/examples/csharp. These are not compiled
as part of the top level API build process, therefore each example program will
need to be compiled by the user using Visual Studio (Windows) or using Mono
Develop (Linux).


Java Examples:
--------------
Java example programs reside in GMSEC_API/examples/java. These are not compiled
as part of the top level API build process, therefore each example program will
need to be compiled by the user. Scripts are provided to facilitate compiling
the example programs.


NodeJS Examples:
--------------
NodeJS example programs reside in GMSEC_API/examples/nodejs. The example programs
are scripts, thus they do not need to be compiled.


Perl Examples:
--------------
Perl example programs reside in GMSEC_API/examples/perl. The example programs
are scripts, thus they do not need to be compiled.


Python3 Examples:
-----------------
Python3 example programs reside in GMSEC_API/examples/python3. The example
programs are scripts, thus they do not need to be compiled.


Ruby Examples:
-----------------
Ruby example programs reside in GMSEC_API/examples/ruby. The example
programs are scripts, thus they do not need to be compiled.



=========================================================================
                       Support/Contact Information
=========================================================================

Questions, comments and concerns regarding the GMSEC API Open Source
distribution should be sent to:

    gmsec-support@lists.nasa.gov

=========================================================================
