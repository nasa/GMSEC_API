# Copyright 2007-2021 United States Government as represented by the
# Administrator of The National Aeronautics and Space Administration.
# No copyright is claimed in the United States under Title 17, U.S. Code.
# All Rights Reserved.
 
 
=========================================================================
                GMSEC API Open Source Build Instructions
=========================================================================

This file describes how to build the GMSEC API from the open source
distribution. The steps in this file assume the user has:

* The source code for the API, located in a directory named GMSEC_API or
  GMSEC_API-x.y, where x.y is the version number.

* For Windows systems: Visual Studio 2017

* For all other systems: make and the GNU Compiler Collection
        * Red Hat Enterprise Linux 7: gcc 4.8.5, GNU make 3.82 [1]
        * MacOS (Intel): gcc Apple LLVM version 10.0.1 (clang-1001.0.46.4), GNU make 3.81

* For Java: Oracle JDK version 1.8 or higher

* For Perl (Windows):
        * Strawberry Perl 5.30.1 or later
		* SWIG 3.0.10 or later
		* the manifest tool (mt.exe) from the Windows SDK

* For Perl (non-Windows):
        * (threaded) Perl 5.8.8 or later
		* the Simplified Wrapper and Interface Generator (SWIG) 3.0.10
          or later

* For Python3:
        * Python 3.8.5 or later
		* SWIG 3.0.10 or later
		* (non-Windows): python36u package, available through IUS 
						(https://centos7.iuscommunity.org/ius-release.rpm)

* For C# (non-windows):
		* Mono JIT Compiler 5.16.0 or later
		
		
Please note that this is intended as a "getting started" document. After
a user becomes familiar with the build process, a more tailored process can be
implemented to fit one's needs.


Comments on dependencies
-----------------------------------------
The tools and versions identified are those used by the GMSEC team to build
binaries for distribution. Many alternative tools and versions will work.

The tools tagged [1] are the defaults shipped on those systems.

Simplified Wrapper and Interface Generator (SWIG) is a third party and open-
source tool used to build the C#, Perl and Python3 language bindings of the
GMSEC API. For users wishing to pursue an open source build of the API, SWIG
will need to be installed in order to build these additional language bindings
of the API.


Building GMSEC API extensions
-----------------------------------------
In order to build GMSEC API extensions, for example middleware adapters,
the directory layout assumed by the build files is:

        + GMSEC_API/
            + ...

        + GMSEC_SUPPORT/
            + ...

For example, if building the middleware adapter for the (fictional) mwx
middleware, the GMSEC_SUPPORT directory would appear as:

        + GMSEC_SUPPORT/
            + mwx/
                + include/
                + lib/
                + ...

where the mwx/include/ and mwx/lib/ directories contain the middleware
client interface and libraries for mwx. Soft-links (or junctions) are useful
when populating the GMSEC_SUPPORT directory since those links can refer to
standard installation locations on the system.

Supported Operating Systems (OSes) include: RHEL7, Ubuntu18.04, MacOS,
and Windows10.


==========================================================================
                           Windows systems
==========================================================================

Note:
--------------
When building from the Open-Source distribution, the GMSEC_API folder
referenced in the instructions below will actually contain the version
number; for example, GMSEC_API-4.8. Edit the instructions below accordingly.


Environment Variable Settings:
-----------------------------------------

PATH:
Define an environment variable JDK_HOME:
* Set to your Java SDK installation directory (not the bin directory)

Define an environment variable named PERL5_HOME:
* Set to your Perl5 installation directory (not the bin directory)

Define an environment variable named PYTHON_HOME:
* Set to your Python installation directory (not the bin directory)

Define an environment variable named RUBY_HOME:
* Set to your Ruby installation directory (not the bin directory)

Define an environment variable named SWIG_HOME:
* Set to your SWIG installation directory (not the bin directory)

Add all of the following to your PATH:
* GMSEC_API\bin (the full path to this directory)
* the path to perl.exe (to build the Perl binding)
* the path to javac (to build the Java binding)
* the .NET Framework 4 directory
* the path to mt.exe (in the Windows SDK)
* Visual Studio 2017's Common7/IDE, VC/Auxiliary/Build, and VC/Tools/MSVC
  directories

For example:
set JDK_HOME=C:\Program Files\Java\jdk1.8.0_131
set PERL5_HOME=C:\Perl64
set PYTHON3_HOME=C:\Python3
set RUBY_HOME=C:\Ruby
set SWIG_HOME=C:\swig-3.0.10
set PATH=%PATH%;C:\GMSEC_API\bin;C:\Perl\bin;C:\Program Files\Java\jdk1.8.131\bin;
set PATH=%PATH%;C:\Windows\Microsoft.NET\Framework\v3.5
set PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE
set PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build;
    C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.13.26128\bin\Hostx64\x64

Please note that when setting environment variables in this fashion, they will
only be available for any processes that are run within the same command line
window.

To set environment variables so that they affect all processes, open up the 
Environment Variables settings in Windows (search for "environment" in the start
menu and add/modify variables as needed*.

Note:
Any open process (e.g. command prompt, cygwin, or Visual Studio) will need to
be restarted if environment variables have been added or modified.


Building the C++, C#, Java, Perl, Python3, and Ruby APIs:
---------------------------------------------------
Open GMSEC_API\gmsecapi_opensource.sln in Visual Studio 2017.

Choose the "Release" Solution Configuration (located in the toolbar) and select
the "x64" architecture (note, the GMSEC API no longer supports "Win32" builds).
From the Solution Explorer, right-click the solution and select "Rebuild
Solution".

To build the dotnet project with the solution file, which is needed to 
build the C#/CLI API, users will instead need to choose the "Release-SNK"
Solution Configuration, then rebuild the solution.  

Users may need to generate a strong-name key file (.SNK) in order to rebuild
with the "Release-SNK" Solution Configuration. To do this, click on the system's
Start menu, then reference Visual Studio 2017, and finally select x64 Native
Tools Command Prompt for VS 2017. From the Command Prompt, navigate to the
GMSEC API extension GMSEC_SUPPORT/windows_snk (users may need to
create this directory). Then execute:

		sn -k GMSEC.snk


Building the GMSEC API legacy (3.X) Perl binding:
-------------------------------------------------
At the Windows command prompt, from the GMSEC_API\perl\gmsec directory, execute:
        perl -Iextra Makefile.PL PREFIX=..\..\bin
        vcvarsall.bat
        nmake
        nmake install


Utilities (e.g. gmpub, gmsub, etc.):
---------------------
Open GMSEC_API\tools\utilities\utilities.sln in Visual Studio. Choose the 
Release configuration. In the Solution Explorer, right-click the solution
and select "Rebuild Solution". (Requires that the C++ API be built.) The
executables will be placed in the GMSEC_API\bin directory.


C++ Examples:
---------------------
Open GMSEC_API\examples\cpp\cpp.sln in Visual Studio. Choose the Release
configuration. In the Solution Explorer, right-click the solution and
select "Rebuild Solution". (Requires that the C++ API be built.) The
executables will be placed in the GMSEC_API\bin directory.


C Examples:
---------------------
Open GMSEC_API\examples\c\c.sln in Visual Studio. Choose the
Release configuration. In the Solution Explorer, right-click the solution
and select "Rebuild Solution". (Requires that the C++ API be built.) The
executables will be placed in the GMSEC_API\bin directory.


C# Examples:
---------------------
Open GMSEC_API\examples\csharp\csharp.sln in Visual Studio. Choose the
Release configuration. In the Solution Explorer, right-click the solution
and select "Rebuild Solution". (Requires that the C++ API be built.) The
executables will be placed in the GMSEC_API\bin directory.


C#/CLI Examples:
---------------------
Open GMSEC_API\examples\csharp-dotnet\cs.sln in Visual Studio. Choose the
Release configuration. In the Solution Explorer, right-click the solution
and select "Rebuild Solution". (Requires that the C++ API be built.) The
executables will be placed in the GMSEC_API\bin directory.


Java Examples:
---------------------
Run GMSEC_API\examples\java\compileAll.cmd

If the builds are successful you will have built the GMSEC API, the Bolt
message delivery server as well as the C and C++ example code. These software
entities will reside in the GMSEC_API\bin directory.

Proceed to the section "Testing the Build" below.


=========================================================================
                        Linux/MacOS systems
=========================================================================

Note:
--------------
When building from the Open-Source distribution, the GMSEC_API folder
referenced in the instructions below will actually contain the version
number; for example, GMSEC_API-4.8. Edit the instructions below accordingly.


Environment Variable Settings:
-----------------------------------------

GMSEC_PLATFORM
--------------
Set the GMSEC_PLATFORM environment variable based on the platform to one
of the following:

        Platform     Setting
        ---------    -------
        Linux         linux.x86_64
        MacOS         macosx.x86_64

e.g.  export GMSEC_PLATFORM=linux.x86_64


JDK PATH:
---------
Set the JDK_HOME environment variable to your JDK installation
e.g.  export JDK_HOME=$HOME/tools/jdk-11.0.7+10

For MacOS users, here's an example of setting JDK_HOME
e.g.  export JDK_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_261.jdk/Contents/Home


PATH :
------
Ensure that the path to the Perl, Python3, Ruby, and SWIG executables are set in the
PATH environment variable so that they can be readily accessed via command
line.

Note that if Perl and SWIG were installed as a default package with the
operating system, then these are already included in /usr/bin and nothing
with respect to these needs to be done here.


PERL5 LIBRARIES:
--------------------
Set the PERL5_INC environment variable to the directory containing
the CORE sub-directory (the latter contains EXTERN.h).

Set the PERL5_LIB environment variable to the directory containing
the Perl shared-object library.

e.g.
RHEL 7/8:
	export PERL5_INC=/usr/lib64/perl5
	export PERL5_LIB=/usr/lib64/perl5

Ubuntu 18.04:
	export PERL5_INC=/usr/lib/x86_64-linux-gnu/perl/5.26.1
	export PERL5_LIB=/usr/lib/x86_64-linux-gnu

Ubuntu 20.04:
	export PERL5_INC=/usr/lib/x86_64-linux-gnu/perl/5.30.0
	export PERL5_LIB=/usr/lib/x86_64-linux-gnu


PYTHON3 DEVELOPMENT HEADERS:
----------------------------
For Python3 support, set PYTHON3_HOME to the location where Python3 development
folder is located. In addition, set PYTHONPATH to reference the appropriate
GMSEC API libraries.

e.g.  export PYTHON3_HOME=/usr/local/python3
      export PYTHONPATH=/home/user/GMSEC_API/bin:/home/user/GMSEC_API/bin/lib/GMSECAPI4:.


RUBY DEVELOPMENT:
----------------------------
For Ruby support, set RUBYLIB to reference the appropriate GMSEC API libraries.

e.g.  export RUBYLIB=/home/user/GMSEC_API/bin:.


SWIG HOME :
-----------
Set the SWIG_HOME environment variable to your SWIG installation directory

e.g.  export SWIG_HOME=/home/user/GMSEC_SUPPORT/swig-3.0.10


MW_WRAPPERS :
-----------
This environment variable can be used to specify which middleware wrappers, in
addition to Message Bus and Bolt wrappers, that should be created. A listing
of the various middleware wrappers that can be built are listed in the
GMSEC_API/wrapper directory.

For example, in Bash, the following statement would indicate that the ActiveMQ
C++ 3.9.5 and the IBM MQ 9.0 wrappers should be built:

    export MW_WRAPPERS="activemq395 ibmmq90"


NOTE:
-----
If these environment settings have been added to a file such as ".profile",
".cshrc", or ".bashrc", etc., these will need to resourced in order to
incorporate these settings into the environment.


Building the API :
-----------------------

To begin building the GMSEC API, execute the following commands:

    $ cd GMSEC_API
    $ make clean && make && make install

If the make-process is successful, the GMSEC API will have been built, along
with a handful of utility executable programs that can be used to test the API.
These software libraries and utilities will reside in the GMSEC_API/bin
directory.


=========================================================================
                            Testing the Build
=========================================================================

Referencing the GMSEC API libraries:
------------------------------------
The GMSEC_API/bin directory holds shared libraries needed by GMSEC.
The environment variable that specifies the directories to search for
shared libraries depends on the operating system:

Platform              Environment Variable
-------------         ----------------------
Windows               PATH
Linux                 LD_LIBRARY_PATH
MacOS                 DYLD_LIBRARY_PATH

Update the environment variable corresponding to the platform to include
the fully qualified GMSEC_API/bin directory.

For example:
Windows   set PATH=C:\GMSEC\release\GMSEC_API\bin;%PATH%
Linux     export LD_LIBRARY_PATH=/home/me/GMSEC/release/GMSEC_API/bin
MacOS     export DYLD_LIBRARY_PATH=/Users/me/GMSEC/release/GMSEC_API/bin


Linux and MacOS users may also wish to include GMSEC_API/bin in their PATH
environment variable; although this is optional, it is highly recommended.
For example:

Linux     export PATH=/home/me/GMSEC/release/GMSEC_API/bin:$PATH

MacOS     export PATH=/Users/me/GMSEC/release/GMSEC_API/bin:$PATH


NOTE:
-----
For MacOS users whose system has System Integrity Protection (SIP) enabled,
setting DYLD_LIBRARY_PATH may prove to be moot. Instead, create soft-links
of the GMSEC API libraries in /usr/local/lib and the GMSEC API message templates
one level above.

For example:
$ cd /usr/local/lib
$ sudo ln -s /Users/me/GMSEC_API/bin/*.dylib .
$ sudo ln -s /Users/me/GMSEC_API/bin/*.jnilib .

$ cd /usr/local
$ sudo ln -s /Users/me/GMSEC_API/templates .


Start the Bolt server:
----------------------
Windows   java -jar C:\GMSEC\release\GMSEC_API\bin\bolt.jar

Linux     java -jar /home/me/GMSEC\release\GMSEC_API\bin\bolt.jar

MacOS     java -jar /Users/me/GMSEC\release\GMSEC_API\bin\bolt.jar

The Bolt server should indicate that it is listening for a connection, with a
an output message similar to:

2013/347/06:01:10.351 INFO bolt.Server
	waiting for connections on /0.0.0.0:9100


Start the GMSEC message subscriber:
-----------------------------------
For all systems:

    gmsub mw-id=bolt


The subscriber should estabish a connection and listen for a message for which
it has subscribed. For example:

2013/347/06:02:07.282 INFO bolt.Server
	creating IOManager

2013/347/06:02:07.323 MONITOR bolt.Client[id=1]
	created

2013/347/06:02:07.342 INFO bolt.IOManager
	welcome: added WELCOME to Client[id=1]


Start the GMSEC message publisher:
----------------------------------
For all systems:

    gmpub mw-id=bolt


The publisher should connect to Bolt and publish a single message, similar to:

2019-252-12:48:21.874 [INFO] [gmpub.cpp:110] GMSEC API v4.7 [09/09/2019]

2019-252-12:48:21.911 [INFO] [BoltConnection.cpp:239] [0,40,0] : Connection established

2019-252-12:48:21.911 [INFO] [gmpub.cpp:121] Middleware version = Bolt 4.7

2019-252-12:48:21.911 [INFO] [gmpub.cpp:176] Publishing 1 message(s)

2019-252-12:48:21.911 [INFO] [gmpub.cpp:181] Publish interval 1000 [ms]

2019-252-12:48:21.911 [INFO] [gmpub.cpp:182] Message subject 'GMSEC.MSSN.SAT1.MSG.HB.GMPUB'

2019-252-12:48:21.916 [INFO] [gmpub.cpp:284] Published:
	<MESSAGE SUBJECT="GMSEC.MSSN.SAT1.MSG.HB.GMPUB" KIND="PUBLISH">
		<FIELD NAME="COMPONENT" TYPE="STRING" HEAD="T">GMPUB</FIELD>
		<FIELD NAME="CONSTELLATION-ID" TYPE="STRING" HEAD="T">CNS1</FIELD>
		<FIELD NAME="CONTENT-VERSION" TYPE="F32" BITS="44FC6000">2019</FIELD>
		<FIELD NAME="COUNTER" TYPE="U16">1</FIELD>
		<FIELD NAME="DOMAIN1" TYPE="STRING" HEAD="T">DOM1</FIELD>
		<FIELD NAME="DOMAIN2" TYPE="STRING" HEAD="T">DOM2</FIELD>
		<FIELD NAME="FACILITY" TYPE="STRING" HEAD="T">MY-FACILITY</FIELD>
		<FIELD NAME="HEADER-VERSION" TYPE="F32" HEAD="T" BITS="44FC6000">2019</FIELD>
		<FIELD NAME="MESSAGE-SUBTYPE" TYPE="STRING" HEAD="T">HB</FIELD>
		<FIELD NAME="MESSAGE-TYPE" TYPE="STRING" HEAD="T">MSG</FIELD>
		<FIELD NAME="MISSION-ID" TYPE="STRING" HEAD="T">MSSN</FIELD>
		<FIELD NAME="PUB-RATE" TYPE="U16">1</FIELD>
		<FIELD NAME="SAT-ID-LOGICAL" TYPE="STRING" HEAD="T">SAT1</FIELD>
		<FIELD NAME="SAT-ID-PHYSICAL" TYPE="STRING" HEAD="T">SAT1</FIELD>
		<FIELD NAME="SPECIFICATION" TYPE="STRING" HEAD="T">GMSEC</FIELD>
	</MESSAGE>

2019-252-12:48:22.011 [INFO] [BoltConnection.cpp:231] [0,39,0] : Connection disconnected


=========================================================================
                      GMSEC API Example Programs
=========================================================================

C++ Examples:
-------------
C++ example programs reside in GMSEC_API/examples/cpp. These are not compiled
as part of the top level API build process, therefore each example program will
need to be compiled by the user using Visual Studio (Windows) or using 'make'
(Linux and MacOS).


C Examples:
-----------
C example programs reside in GMSEC_API/examples/c. These are not compiled
as part of the top level API build process, therefore each example program will
need to be compiled by the user using Visual Studio (Windows) or using 'make'
(Linux and MacOS).


C# Examples:
------------
C# example programs reside in GMSEC_API/examples/csharp. These are not compiled
as part of the top level API build process, therefore each example program will
need to be compiled by the user using Visual Studio (Windows) or using Mono
Develop (Linux).


C#/CLI Examples:
----------------
C#/CLI example programs reside in GMSEC_API/examples/csharp-dotnet. These are
not compiled as part of the top level API build process, therefore each example
program will need to be compiled by the user using Visual Studio.


Java Examples:
--------------
Java example programs reside in GMSEC_API/examples/java. These are not compiled
as part of the top level API build process, therefore each example program will
need to be compiled by the user. Scripts are provided to facilitate compiling
the example programs.


Perl Examples:
--------------
Perl example programs reside in GMSEC_API/examples/perl. The example programs
are scripts, thus they do not need to be compiled.


Python3 Examples:
-----------------
Python3 example programs reside in GMSEC_API/examples/python3. The example
programs are scripts, thus they do not need to be compiled.


Ruby Examples:
-----------------
Ruby example programs reside in GMSEC_API/examples/ruby. The example
programs are scripts, thus they do not need to be compiled.


=========================================================================
                       Runtime Environment
=========================================================================

Note: ROOT-DIR is the full path to where the GMSEC_API is installed. For
example:

	ROOT-DIR = C:\GMSEC\
or
	ROOT-DIR = ~\GMSEC\


Java Programs:
------------------
In order to run programs with the Java binding, the gmsecapi.jar file must be
present in the CLASSPATH.

For example:
Windows    set CLASSPATH=<ROOT-DIR>\GMSEC_API/bin\gmsecapi.jar

Linux      export CLASSPATH=<ROOT-DIR>/GMSEC_API/bin/gmsecapi.jar

MacOS      export CLASSPATH=<ROOT-DIR>/GMSEC_API/bin/gmsecapi.jar


Perl Programs:
--------------
In order to run programs with the Perl binding, the GMSEC_API/bin and
GMSEC_API/bin/lib/GMSECAPI4 directories must be set in the PERL5LIB
environment variable.

NOTE: This is not the same as the PERL5_LIB variable used for building the API.

For example:
Windows    set PERL5LIB=<ROOT-DIR>\GMSEC_API\bin;<ROOT-DIR>\GMSEC_API\bin\lib\GMSECAPI4

Linux      export PERL5LIB=<ROOT-DIR>/GMSEC_API/bin:<ROOT-DIR>/GMSEC_API/bin/lib/GMSECAPI4

MacOS      export PERL5LIB=<ROOT-DIR>/GMSEC_API/bin:<ROOT-DIR>/GMSEC_API/bin/lib/GMSECAPI4


Python3 Programs:
-----------------
In order to run programs with the Python3 binding, the GMSEC_API/bin and
GMSEC_API/bin/lib/GMSECAPI4 directories must be set in the PYTHONPATH
environment variable.

For example:
Windows    set PYTHONPATH=<ROOT-DIR>\GMSEC_API\bin;<ROOT-DIR>\GMSEC_API\bin\lib\GMSECAPI4

Linux      export PYTHONPATH=<ROOT-DIR>/GMSEC_API/bin:<ROOT-DIR>/GMSEC_API/bin/lib/GMSECAPI4

MacOS      export PYTHONPATH=<ROOT-DIR>/GMSEC_API/bin:<ROOT-DIR>/GMSEC_API/bin/lib/GMSECAPI4


Ruby Programs:
-----------------
In order to run programs with the Ruby binding, the GMSEC_API/bin directory must be set in
the RUBYLIB environment variable.

For example:
Windows    set RUBYLIB=<ROOT-DIR>\GMSEC_API\bin

Linux      export RUBYLIB=<ROOT-DIR>/GMSEC_API/bin

MacOS      export RUBYLIB=<ROOT-DIR>/GMSEC_API/bin


=========================================================================
                       Support/Contact Information
=========================================================================

Questions, comments and concerns regarding the GMSEC API Open Source
distribution should be sent to:

gmsec-support@lists.nasa.gov

=========================================================================
