 
# Copyright 2007-2019 United States Government as represented by the
# Administrator of The National Aeronautics and Space Administration.
# No copyright is claimed in the United States under Title 17, U.S. Code.
# All Rights Reserved.
 
 
=========================================================================
             GMSEC API Open Source Build Instructions
=========================================================================

This file describes how to build the GMSEC API from the open source
distribution. The steps in this file assume you have:

* the source code for the API, located in a directory named GMSEC_API
* for Windows systems: Visual Studio 2017
* for all other systems: make and the GNU Compiler Collection
        * Red Hat Enterprise Linux 6: gcc 4.4.6, GNU make 3.81 [1]
        * Red Hat Enterprise Linux 7: gcc 4.8.5, GNU make 3.82 [1]
        * Mac OS X (Intel): gcc LLVM 5.1 (clang-503.0.40), GNU make 3.81
* for Java: Oracle JDK version 1.8 or higher
* for Perl (non-Windows):
        * (threaded) Perl 5.8.8 or later
		* the Simplified Wrapper and Interface Generator (SWIG)
		  3.0.10 or later
* for Perl (Windows):
        * ActivePerl 5.14.2 (build 1402)
		* SWIG 3.0.10 or later
		* the manifest tool (mt.exe) from the Windows SDK
* for Python 2:
        * Python 2.7
		* SWIG 3.0.10 or later
		* (non-Windows): python-devel package
* for Python 3:
        * Python 3.6 or later
		* SWIG 3.0.10 or later
		* (non-Windows): python36u package, available through IUS 
						(https://centos7.iuscommunity.org/ius-release.rpm)
* for C# (non-windows):
		* Mono JIT Compiler 5.16.0 or later
		
		
Please note that this is intended as a "getting started" document. After
you are familiar with the build process, you will probably want to tailor
it to your system.


Comments on dependencies
-----------------------------------------
The tools and versions identified are those used by the GMSEC team to build
binaries for distribution. Many alternative tools and versions will work.

The tools tagged [1] are the defaults shipped on those systems.

Simplified Wrapper and Interface Generator (SWIG) is a third party, open
source tool used to build the 4.X Perl and Python language bindings of the
GMSEC API.  For users wishing to pursue an open source build of the API, you
will have to build SWIG before you are able to build the API.  For build and
installation instructions, please refer to the README file contained in the
SWIG open source distribution package.

The API has two additional dependencies, libxml2 and libxslt, which are third 
party, open source libraries for parsing and transforming XML formatted files.
Binaries for libxslt and libxml2 are available at:

For Windows:
	http://xmlsoft.org/sources/win32/
	
For RHEL/CentOS:
	$ sudo yum install libxml2-devel libxslt-devel
	
For Ubuntu:
	$ sudo apt-get install libxml2-dev libxslt-dev

For macOS:
	Install Xcode from the App Store.

The libraries can also be built from source, which are also available from the
xmlsoft.org website. Build and installation instructions are included with 
the source code.


Building GMSEC API extensions
-----------------------------------------
In order to build GMSEC API extensions, for example middleware adapters,
the directory layout assumed by the build files is:

        + GMSEC_API/
            + ...

        + SUPPORT/
            + ...

For example, if building the middleware adapter for the (fictional) mwx
middleware, the SUPPORT directory would have

        + SUPPORT/
            + mwx/
                + include/
                + lib/
                + ...
            + libxml2/
                + include/
                + lib/
                + ...
            + libxslt/
                + include/
                + lib/
                + ...

where the mwx/include/ and mwx/lib/ directories contain the middleware
client interface and libraries for mwx.  Symbolic links are useful when
populating the SUPPORT directory since those links can refer to standard
installation locations on the system.


==========================================================================
                              Windows systems:
==========================================================================

Environment Variable Settings:
-----------------------------------------
PATH:
Define an environment variable JDK_HOME:
* Set to your Java SDK installation directory (not the bin directory)

Define an environment variable named PERL5_HOME:
* Set to your Perl5 installation directory (not the bin directory)

Define an environment variable named PYTHON_HOME:
* Set to your Python installation directory (not the bin directory)

Define an environment variable named SWIG_HOME:
* Set to your SWIG installation directory (not the bin directory)

Add all of the following to your PATH:
* GMSEC_API\bin (the full path to this directory)
* the path to perl.exe (to build the Perl binding)
* the path to javac (to build the Java binding)
* the .NET Framework 4 directory
* the path to mt.exe (in the Windows SDK)
* Visual Studio 2017's Common7/IDE, VC/Auxiliary/Build, and VC/Tools/MSVC directories

For example:
set JDK_HOME=C:\Program Files\Java\jdk1.8.0_131
set PERL5_HOME=C:\Perl64
set PYTHON_HOME=C:\Python27
set SWIG_HOME=C:\swig-3.0.10
set PATH=%PATH%;C:\GMSEC_API\bin;C:\Perl\bin;C:\Program Files\Java\jdk1.8.131\bin;
set PATH=%PATH%;C:\Windows\Microsoft.NET\Framework\v3.5
set PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\Common7\IDE
set PATH=%PATH%;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build;
    C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Tools\MSVC\14.13.26128\bin\Hostx64\x64

Please note that when setting environment variables in this fashion, they will
only be available for any processes that are run within the same command line
window.

To set environment variables so that they affect all processes, open up the 
Environment Variables settings in Windows (search for "environment" in the start
menu and add/modify variables as needed*.

* If you already have a process (e.g. command prompt, cygwin, or visual studio)
  open when modifying the variables, the new settings will not take place until
  you restart the process.

Preliminary Step for Perl API:
----------------------------------
(Note: This step can be skipped if you do not intend to build the Perl API)
In order to build the 4.X Perl API on Windows, a file named perl.lib must
be created in the %PERL5_HOME%/lib/CORE directory.  To do so, either create
a hard link or create a copy of the perlXYZ.lib file, where XYZ refers to the version
of perl, and name the link or file copy perl.lib.

e.g. mklink /H perl.lib perl514.lib
e.g. copy perl514.lib perl.lib

(The perl.lib file is used during the linking process of the 4.X Perl API build)

Building the C++, C#, Java, Perl, and Python APIs:
---------------------------------------
Next, open GMSEC_API\gmsecapi_opensource.sln in Visual Studio 2017.

Choose the "Release" Solution Configuration (located in the toolbar) and select
the appropriate architecture for your system (Win32 or x64). In the
Solution Explorer, right-click the solution and select "Rebuild Solution".

To build the dotnet project with the solution file, which is needed to 
build C# API, you will instead need to choose the "Release-SNK" Solution 
Configuration, then rebuild the solution.  

You may need to generate a strong-name key file (.SNK) in order to rebuild with
the "Release-SNK" Solution Configuration. To do this, click Start, point to All
Programs, point to Microsoft Visual Studio 2017, point to Visual Studio Tools,
then click Developer Command Prompt for VS 2017. From the Command Prompt, navigate
to the GMSEC API extension SUPPORT/windows_snk (you may need to create this 
directory). Then execute:
		sn -k GMSEC.snk

The GMSEC API jar file
	GMSEC_API\bin\gmsecapi.jar
needs to be in the Java classpath to make use of the GMSEC API Java binding.

Building the GMSEC API legacy (3.X) Perl binding:
-------------------------------------------------
At the Windows command prompt, from the GMSEC_API\perl\gmsec directory, execute:
        perl -Iextra Makefile.PL PREFIX=..\..\bin
        vcvarsall.bat
        nmake
        nmake install

Utilities (e.g. gmpub, gmsub, etc.):
---------------------
Open GMSEC_API\tools\utilities\utilities.sln in Visual Studio. Choose the 
Release configuration. In the Solution Explorer, right-click the solution
and select "Rebuild Solution". (Requires that the C++ API be built.) The
executables will be placed in the GMSEC_API/bin directory.

C++ Examples:
---------------------
Open GMSEC_API\examples\cpp\cpp.sln in Visual Studio. Choose the Release
configuration. In the Solution Explorer, right-click the solution and
select "Rebuild Solution". (Requires that the C++ API be built.) The
executables will be placed in the GMSEC_API/bin directory.

C# Examples:
---------------------
Open GMSEC_API\examples\csharp-dotnet\cs.sln in Visual Studio. Choose the
Release configuration. In the Solution Explorer, right-click the solution
and select "Rebuild Solution". (Requires that the C++ API be built.)  The
executables will be placed in the GMSEC_API/bin directory.

C Examples:
---------------------
Open GMSEC_API\examples\c\c.sln in Visual Studio 2008 Express. Choose the
Release configuration. In the Solution Explorer, right-click the solution
and select "Rebuild Solution". (Requires that the C++ API be built.)  The
executables will be placed in the GMSEC_API/bin directory.

Java Examples:
---------------------
Run GMSEC_API\examples\java\compileAll.cmd

If the builds are successful you will have built the GMSEC API, the Bolt
message delivery server as well as the C and C++ example code.  These software
entities will reside in the GMSEC_API\bin directory.

Proceed to the section "Testing the Build" below.


=========================================================================
                        Linux/macOS systems:
=========================================================================

Environment Variable Settings:
-----------------------------------------
GMSEC_PLATFORM
--------------
Set the GMSEC_PLATFORM environment variable based on the platform to one
of the following:

 Platform                 Setting
-------------            ------------
Linux x86 (gcc)          linux.x86
Linux x86_64 (gcc)       linux.x86_64 or linux.x86_64-32bit

macOS x86_64 (gcc)       macosx.x86_64


The configuration files associated with these platforms are in
        + GMSEC_API/
            + config/
                + ...


JDK PATH:
---------
Set the JDK_HOME environment variable to your JDK installation
e.g.  export JDK_HOME=/usr/java/jdk1.8.0_131

For macOS users, here's an example of setting JDK_HOME
e.g.  export JDK_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.131.jdk/Contents/Home/


PATH :
------
Ensure that the path to the Perl and Python executables are set in the
PATH environment variable so that they can be readily accessed via command
line.

Note that if Python and Perl were installed as a default package with the
operating system, then they are already included in /usr/bin and nothing
needs to be done here.


CLASSPATH :
-----------
Add the GMSEC API jar file to the CLASSPATH.  It will reside
in the GMSEC_API/bin directory after a successful builld.

        GMSEC_API/bin/gmsecapi.jar

		
PERL5 LIBRARIES :
--------------------
Set the PERL5_LIB environment variable to the directory containing the library
files for your installation of Perl 5.

(Note: This directory path may vary between different versions of Perl.  The
directory in question contains a subdirectory named "CORE")

e.g.  export PERL5_LIB=/usr/lib64/perl5


PYTHON3 DEVELOPMENT HEADERS :
-------------
For Python3 support, set PYTHON3_HOME to the location where Python3 development
folder is located.

e.g. export PYTHON3_HOME=/usr/local/python3


SWIG HOME :
-----------
Set the SWIG_HOME environment variable to your SWIG installation directory

e.g.  export SWIG_HOME=/home/user/tools/swig-3.0.10


For running the GMSEC API examples:
-----------------------------------
The GMSEC_API/bin directory holds shared libraries needed by GMSEC.
The environment variable that specifies the directories to search for
shared libraries depends on the operating system:

 Platform              Environment Variable
-------------         ----------------------
Linux                 LD_LIBRARY_PATH
macOS                 DYLD_LIBRARY_PATH


Note: For macOS users whose system has System Integrity Protection (SIP)
enabled, setting DYLD_LIBRARY_PATH will be moot. Instead, create soft-links of
the GMSEC API libraries in /usr/local/lib. For example:

cd /usr/local/lib
sudo ln -s /opt/GMSEC/GMSEC_API/bin/*.dylib .
sudo ln -s /opt/GMSEC/GMSEC_API/bin/*.jnilib .


Update the environment variable corresponding to the platform to include
the fully qualified GMSEC_API/bin directory.


MW_WRAPPERS :
-----------
This environment variable can be used to specify which middleware wrappers, in
addition to Message Bus and Bolt wrappers, that should be created.  A listing
of the various middleware wrappers that can be built are listed in the
GMSEC_API/wrapper directory.

For example, in Bash, the following statement would indicate that the ActiveMQ
C++ 3.9.4 and the IBM MQ 9.0 wrappers should be built:

    export MW_WRAPPERS="activemq394 ibmmq90"

NOTE:
-----
If you've added these environment settings to a file such as ".profile",
".cshrc", or ".bashrc", etc., you will need to source these files in order to
incorporate these settings into your environment.


Building the API :
-----------------------

To begin building the GMSEC API, execute the following commands:

    $ cd GMSEC_API
    $ make              # for RHEL, macOS

When the make-process has completed, the GMSEC API will have been built, along
with related software, such as the C and C++ example applications, and the
Java GMSEC API binding (JAR file).  These software entities will reside in the
GMSEC_API/bin directory.

The (make) install target can be used to copy a runnable version of the
GMSEC API to the GMSEC_API/../release/ directory.  The given install target
is dependent on GNU tar.

Proceed to the section "Testing the Build" below.


=========================================================================
                          All systems:
=========================================================================

Perl Examples:
--------------------
The examples are Perl scripts and therefore do not need to be compiled.
They are located in the directory :

	GMSEC_API/examples/perl
	
	
Python Examples:
--------------------
The examples are Python scripts and therefore do not need to be compiled.
They are located in the directory :

	For Python 2:
	GMSEC_API/examples/python
	
	For Python 3:
	GMSEC_API/examples/python3


Java Examples:
---------------------
The Java example code residing in GMSEC_API/examples/java is not compiled
as part of the top level API build process, therefore each Java example
code snippet is left to be built as a user exercise.


=========================================================================
                       Runtime Environment:
=========================================================================

Java Programs:
------------------
In order to run programs with the Java API, the gmsecapi.jar file must be
present in the CLASSPATH:

e.g.
(Windows) set CLASSPATH=<Full path to the API>/GMSEC_API/bin/gmsecapi.jar
(Linux) export CLASSPATH=<Full path to the API>/GMSEC_API/bin/gmsecapi.jar


Perl Programs:
------------------
In order to run programs with the Perl API, the GMSEC_API/bin and
GMSEC_API/bin/lib/GMSECAPI4 directories must be set in the PERL5LIB
environment variable.

PLEASE NOTE that this is not the same as the PERL5_LIB variable used
for building the API.

e.g.
(Windows) set PERL5LIB=<Full path to the API>/GMSEC_API/bin;
				<Full path to the API>/GMSEC_API/bin/lib/GMSECAPI4
(Linux) export PERL5LIB=<Full path to the API>/GMSEC_API/bin:
				<Full path to the API>/GMSEC_API/bin/lib/GMSECAPI4


Python Programs:
------------------
In order to run programs with the Python API, the GMSEC_API/bin and
GMSEC_API/bin/lib/GMSECAPI4 directories must be set in the PYTHONPATH
environment variable.

e.g.
(Windows) set PYTHONPATH=<Full path to the API>/GMSEC_API/bin;
				<Full path to the API>/GMSEC_API/bin/lib/GMSECAPI4
(Linux) export PYTHONPATH=<Full path to the API>/GMSEC_API/bin:
				<Full path to the API>/GMSEC_API/bin/lib/GMSECAPI4


=========================================================================
                       Testing the Build:
=========================================================================

1.) Go to the binary directory
* GMSEC_API/bin

2.) Start the Bolt server as such:
* java -jar bolt.jar

You should see Bolt listening for a connection, something like this:

2013/347/06:01:10.351 INFO bolt.Server
	waiting for connections on /0.0.0.0:9100

3.) Start a GMSEC subscriber as such:
* For Unix Systems type: ./gmsub mw-id=bolt
* For Window Systems type: gmsub.exe mw-id=bolt

You should see the subscriber estabish a connection and listening for a
message for which it has subscribed, something like this:

2013/347/06:02:07.282 INFO bolt.Server
	creating IOManager

2013/347/06:02:07.323 MONITOR bolt.Client[id=1]
	created

2013/347/06:02:07.342 INFO bolt.IOManager
	welcome: added WELCOME to Client[id=1]


4.) Execute a GMSEC publisher as such:
* For Unix Systems type: ./gmpub mw-id=bolt
* For Window Systems type: gmpub.exe mw-id=bolt

You should see the publisher connect to Bolt and publish a series
of messages, something like this:

2018-304-16:09:59.133 [INFO] [gmpub.cpp:102] GMSEC API v4.5 [10/30/2018]

2018-304-16:09:59.145 [INFO] [gmsec/BoltConnection.cpp:239] [0,40,0] : Connection established

2018-304-16:09:59.145 [INFO] [gmpub.cpp:113] Middleware version = Bolt 4.5

2018-304-16:09:59.145 [INFO] [gmpub.cpp:160] Publishing 1 message(s)

2018-304-16:09:59.145 [INFO] [gmpub.cpp:165] Publish interval 1000 [ms]

2018-304-16:09:59.145 [INFO] [gmpub.cpp:166] Message subject 'GMSEC.TEST.PUBLISH'

2018-304-16:09:59.146 [INFO] [gmpub.cpp:248] Published:
	<MESSAGE SUBJECT="GMSEC.TEST.PUBLISH" KIND="PUBLISH">
		<FIELD NAME="BIN-FIELD" TYPE="BIN">4A4C4D4E4F5051</FIELD>
		<FIELD NAME="BOOL-FIELD-FALSE" TYPE="BOOL">FALSE</FIELD>
		<FIELD NAME="BOOL-FIELD-TRUE" TYPE="BOOL">TRUE</FIELD>
		<FIELD NAME="CHAR-FIELD" TYPE="CHAR">c</FIELD>
		<FIELD NAME="COUNT" TYPE="I32">0</FIELD>
		<FIELD NAME="F32-FIELD" TYPE="F32" BITS="40000000">2</FIELD>
		<FIELD NAME="F64-FIELD" TYPE="F64" BITS="4000000000000000">2</FIELD>
		<FIELD NAME="I16-FIELD" TYPE="I16">1</FIELD>
		<FIELD NAME="I32-FIELD" TYPE="I32">1</FIELD>
		<FIELD NAME="I64-FIELD" TYPE="I64">1</FIELD>
		<FIELD NAME="I8-FIELD" TYPE="I8">1</FIELD>
		<FIELD NAME="STRING-FIELD" TYPE="STRING">This is a test</FIELD>
		<FIELD NAME="U16-FIELD" TYPE="U16">1</FIELD>
		<FIELD NAME="U32-FIELD" TYPE="U32">1</FIELD>
		<FIELD NAME="U64-FIELD" TYPE="U64">1</FIELD>
		<FIELD NAME="U8-FIELD" TYPE="U8">1</FIELD>
	</MESSAGE>

2018-304-16:09:59.245 [INFO] [gmsec/BoltConnection.cpp:231] [0,39,0] : Connection disconnected


=========================================================================
                         Contact Information:
=========================================================================

Questions, comments and concerns regarding the GMSEC API Open Source
distribution should be forwarded to:

gmsec-support@lists.nasa.gov

=========================================================================
